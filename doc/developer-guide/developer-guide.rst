.. _Developer_Guide:

#########################################
DSM Developer Guide
#########################################

The DSM is a non-configurable CSC that looks for output telemetry files from 
the Dome Seeing Monitor UI and sends that information across SAL for recording
in the EFD. The CSC also has two simulation modes in addition to the standard
operational (real) mode and they will be described later. 

.. _Dependencies:

Dependencies
============

* `SAL <https://ts-sal.lsst.io>`_ - 5.0.0
* ts_xml - v6.1.0
* ts_salobj - v6.0.0
* `aionotify <https://github.com/rbarrois/aionotify>`_ - 0.2.0

.. Linking to the previous versions may also be worthwhile, depending on the CSC

.. _API:

DSM API
=============================

The content in this section is autogenerated from docstrings.

.. The code below should insert the docstrings from the code.

.. automodapi:: lsst.ts.dsm
    :no-main-docstr:
    :no-inheritance-diagram:


.. _Build:

Build and Test
==============

The recommended method for development is to get the T&S development Docker container
(need doc link). Since the DSM code is not shipped with the development container, a
clone of the code is necessary. Determine a place on your computer and get it via this

.. prompt:: bash

  git clone git@github.com:lsst-ts/ts_dsm.git

It is recommended that the code be cloned into another directory as the potential
of needing other repositories is possible. Change or create the appropriate branch in the clone. Remember the location housing the repository.

At the time of this writing, the development container to retrieve is ``lsstts/develop-env:c0010``. Note that it is NOT compatible with SAL 5 and SALOBJ 6 out of the 
box. Those packages must be cloned, ``eups declare`` run and branch switched before
embarking on the development of the ``ts_dsm`` code. The OpenSplice configuration
must also be changed to handle the new software versions. This will not be covered as the
hope is a new development container will soon appear.

To build the code and run the unit tests, do the following.

.. code-block:: bash

    docker run -it --name {name for container} -v {repository_location}:/home/saluser/develop lsstts/develop-env:c0010
    cd develop/ts_dsm
    setup -kr .
    pip install aionotify
    scons

The ``pip`` installation of ``aionotify`` is required since the package does not come
with the development environment. While developing the code, ``scons`` can be used to run the unit tests after code changes.

.. _Usage:

Usage
=====

There are two scripts that perform operations of the CSC. They are ``run_dsm.py`` and ``shutdown_dsm.py``. The parameters they take can be found by passing ``-h`` or
``--help`` to the given script. The ``run_dsm.py`` script constructs the CSC and sends
it to ``ENABLED`` state, allowing for the CSC to function straight away. It can be
run in real mode or one of two simulation modes. The simulation modes will be shown
in the next session. To run the CSC in real mode, do the following.

.. prompt:: bash

  run_dsm.py

If the DSM is run in real mode for testing with the DSM UI, the telemetry directory
that the UI uses must be mounted into the container. If one uses the repository
location directory to create a directory (say ``telemetry``), this is handled by the 
``docker run`` command shown above. However, the DSM CSC expects the telemetry directory to be in ``/home/saluser/telemetry``. This can be overridden by using the ``DSM_TELEMETRY_DIR`` environment variable to set the new path. It should be:

.. prompt:: bash

  export DSM_TELEMETRY_DIR=/home/saluser/develop/{path for telemetry directory}

and done in the development container before running the startup script.

The ``shutdown_dsm.py`` script can be used to send the CSC to ``STANDBY`` state or
``OFFLINE`` state. If the CSC is sent to ``OFFLINE``, the process started
by the ``run_dsm.py`` script will be shutdown and terminated. Since the run script will
block the current container terminal, you will have to ``docker exec`` into the container to run the shutdown script. For ``STANDBY`` state, run the script this way.

.. prompt:: bash

  shutdown_dsm.py

For ``OFFLINE`` state, run the script this way.

.. prompt:: bash

  shutdown_dsm.py -f

.. _Simulator:

Simulator
=========

There are two simulation modes available to the DSM CSC. One mode sends out the
telemetry information every second (fast mode) and the other mode sends it out every 
30 seconds (slow mode). The telemetry files are generated internally by the CSC
so the operation looks very similar to real mode operation, except that the telemetry
directory is a generated directory in ``/tmp`` and requires no special setup.
To run the CSC in fast mode, do the following.

.. prompt:: bash

  run_dsm.py -f

To run the CSC is slow mode, do the following.

.. prompt:: bash

  run_dsm.py -s

.. _Documentation:

Building the Documentation
==========================

If the process described in :ref:`Build` has been followed, then building the
documentation by running the following from the top-level directory of
the repository clone:

.. prompt:: bash

  package-docs build

If the ``documenteer`` package is not installed, then do the following before
building the documentation from the top-level repository directory.

.. prompt:: bash

  pip install -r requirements.txt

.. _Contributing:

Contributing
============

Code and documentation contributions utilize pull-requests on github.
Feature requests can be made by filing a Jira ticket with the `DSM` label.
In all cases, reaching out to the :ref:`contacts for this CSC <ts_xml:index:master-csc-table:DSM>` is recommended.

